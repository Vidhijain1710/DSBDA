{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Heart Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>212</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>203</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>155</td>\n",
       "      <td>1</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>145</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>1</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>148</td>\n",
       "      <td>203</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138</td>\n",
       "      <td>294</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
       "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
       "2   70    1   0       145   174    0        1      125      1      2.6      0   \n",
       "3   61    1   0       148   203    0        1      161      0      0.0      2   \n",
       "4   62    0   0       138   294    1        1      106      0      1.9      1   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   2     3       0  \n",
       "1   0     3       0  \n",
       "2   0     3       0  \n",
       "3   1     3       0  \n",
       "4   3     2       0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"heart.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in data['target']:\n",
    "    if(i==0):\n",
    "        data['target'].replace(i,\"No Disease\", inplace=True)\n",
    "    else:\n",
    "        data['target'].replace(i,\"Disease\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='target', ylabel='chol'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.boxplot(x='target', y='chol', data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age', ylabel='chol'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='age', y='chol', data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "cp          0\n",
       "trestbps    0\n",
       "chol        0\n",
       "fbs         0\n",
       "restecg     0\n",
       "thalach     0\n",
       "exang       0\n",
       "oldpeak     0\n",
       "slope       0\n",
       "ca          0\n",
       "thal        0\n",
       "target      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age          41\n",
       "sex           2\n",
       "cp            4\n",
       "trestbps     49\n",
       "chol        152\n",
       "fbs           2\n",
       "restecg       3\n",
       "thalach      91\n",
       "exang         2\n",
       "oldpeak      40\n",
       "slope         3\n",
       "ca            5\n",
       "thal          4\n",
       "target        2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1025, 14)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in data['ca']:\n",
    "    if(i!=0 and i!=1 and i!=3 and i!=2):\n",
    "        data['ca'].replace(i, np.NaN, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in data['thal']:\n",
    "    if(i!=1 and i!=3 and i!=2):\n",
    "        data['thal'].replace(i, np.NaN, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicate = data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicated row 723\n"
     ]
    }
   ],
   "source": [
    "if duplicate:\n",
    "    print(\"Duplicated row {}\".format(duplicate))\n",
    "else:\n",
    "    print(\"Not Duplicated\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>212</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No Disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>203</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>155</td>\n",
       "      <td>1</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No Disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>145</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>1</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No Disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>148</td>\n",
       "      <td>203</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>No Disease</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138</td>\n",
       "      <td>294</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>No Disease</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
       "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
       "2   70    1   0       145   174    0        1      125      1      2.6      0   \n",
       "3   61    1   0       148   203    0        1      161      0      0.0      2   \n",
       "4   62    0   0       138   294    1        1      106      0      1.9      1   \n",
       "\n",
       "    ca  thal      target  \n",
       "0  2.0   3.0  No Disease  \n",
       "1  0.0   3.0  No Disease  \n",
       "2  0.0   3.0  No Disease  \n",
       "3  1.0   3.0  No Disease  \n",
       "4  3.0   2.0  No Disease  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates = data[data.duplicated(keep=False)]\n",
    "duplicates.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age          0\n",
       "sex          0\n",
       "cp           0\n",
       "trestbps     0\n",
       "chol         0\n",
       "fbs          0\n",
       "restecg      0\n",
       "thalach      0\n",
       "exang        0\n",
       "oldpeak      0\n",
       "slope        0\n",
       "ca          18\n",
       "thal         7\n",
       "target       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(302, 14)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop_duplicates(inplace=True)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Air Quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Akanksha Patil\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3146: DtypeWarning: Columns (0) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stn_code</th>\n",
       "      <th>sampling_date</th>\n",
       "      <th>state</th>\n",
       "      <th>location</th>\n",
       "      <th>agency</th>\n",
       "      <th>type</th>\n",
       "      <th>so2</th>\n",
       "      <th>no2</th>\n",
       "      <th>rspm</th>\n",
       "      <th>spm</th>\n",
       "      <th>location_monitoring_station</th>\n",
       "      <th>pm2_5</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>4.8</td>\n",
       "      <td>17.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>151</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>3.1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>152</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.2</td>\n",
       "      <td>28.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>14.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>151</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>4.7</td>\n",
       "      <td>7.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  stn_code       sampling_date           state   location agency  \\\n",
       "0      150  February - M021990  Andhra Pradesh  Hyderabad    NaN   \n",
       "1      151  February - M021990  Andhra Pradesh  Hyderabad    NaN   \n",
       "2      152  February - M021990  Andhra Pradesh  Hyderabad    NaN   \n",
       "3      150     March - M031990  Andhra Pradesh  Hyderabad    NaN   \n",
       "4      151     March - M031990  Andhra Pradesh  Hyderabad    NaN   \n",
       "\n",
       "                                 type  so2   no2  rspm  spm  \\\n",
       "0  Residential, Rural and other Areas  4.8  17.4   NaN  NaN   \n",
       "1                     Industrial Area  3.1   7.0   NaN  NaN   \n",
       "2  Residential, Rural and other Areas  6.2  28.5   NaN  NaN   \n",
       "3  Residential, Rural and other Areas  6.3  14.7   NaN  NaN   \n",
       "4                     Industrial Area  4.7   7.5   NaN  NaN   \n",
       "\n",
       "  location_monitoring_station  pm2_5      date  \n",
       "0                         NaN    NaN  2/1/1990  \n",
       "1                         NaN    NaN  2/1/1990  \n",
       "2                         NaN    NaN  2/1/1990  \n",
       "3                         NaN    NaN  3/1/1990  \n",
       "4                         NaN    NaN  3/1/1990  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = pd.read_csv(\"airquality1.csv\", encoding=\"ISO-8859-1\")\n",
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(435742, 13)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "stn_code                       144077\n",
       "sampling_date                       3\n",
       "state                               0\n",
       "location                            3\n",
       "agency                         149481\n",
       "type                             5393\n",
       "so2                             34646\n",
       "no2                             16233\n",
       "rspm                            40222\n",
       "spm                            237387\n",
       "location_monitoring_station     27491\n",
       "pm2_5                          426428\n",
       "date                                7\n",
       "dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stn_code</th>\n",
       "      <th>sampling_date</th>\n",
       "      <th>state</th>\n",
       "      <th>location</th>\n",
       "      <th>type</th>\n",
       "      <th>so2</th>\n",
       "      <th>no2</th>\n",
       "      <th>rspm</th>\n",
       "      <th>location_monitoring_station</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>4.8</td>\n",
       "      <td>17.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>151</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>3.1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>152</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.2</td>\n",
       "      <td>28.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>14.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>151</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>4.7</td>\n",
       "      <td>7.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  stn_code       sampling_date           state   location  \\\n",
       "0      150  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "1      151  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "2      152  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "3      150     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "4      151     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "\n",
       "                                 type  so2   no2  rspm  \\\n",
       "0  Residential, Rural and other Areas  4.8  17.4   NaN   \n",
       "1                     Industrial Area  3.1   7.0   NaN   \n",
       "2  Residential, Rural and other Areas  6.2  28.5   NaN   \n",
       "3  Residential, Rural and other Areas  6.3  14.7   NaN   \n",
       "4                     Industrial Area  4.7   7.5   NaN   \n",
       "\n",
       "  location_monitoring_station      date  \n",
       "0                         NaN  2/1/1990  \n",
       "1                         NaN  2/1/1990  \n",
       "2                         NaN  2/1/1990  \n",
       "3                         NaN  3/1/1990  \n",
       "4                         NaN  3/1/1990  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.drop(columns=['agency', 'spm', 'pm2_5'], inplace=True)\n",
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "data2.fillna('NaN', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "stn_code                       0\n",
       "sampling_date                  0\n",
       "state                          0\n",
       "location                       0\n",
       "type                           0\n",
       "so2                            0\n",
       "no2                            0\n",
       "rspm                           0\n",
       "location_monitoring_station    0\n",
       "date                           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(435742, 10)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stn_code</th>\n",
       "      <th>sampling_date</th>\n",
       "      <th>state</th>\n",
       "      <th>location</th>\n",
       "      <th>type</th>\n",
       "      <th>so2</th>\n",
       "      <th>no2</th>\n",
       "      <th>rspm</th>\n",
       "      <th>location_monitoring_station</th>\n",
       "      <th>date</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>4.8</td>\n",
       "      <td>17.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>151</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>3.1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>152</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.2</td>\n",
       "      <td>28.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2/1/1990</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>14.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>151</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>4.7</td>\n",
       "      <td>7.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3/1/1990</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  stn_code       sampling_date           state   location  \\\n",
       "0      150  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "1      151  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "2      152  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "3      150     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "4      151     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "\n",
       "                                 type  so2   no2 rspm  \\\n",
       "0  Residential, Rural and other Areas  4.8  17.4  NaN   \n",
       "1                     Industrial Area  3.1     7  NaN   \n",
       "2  Residential, Rural and other Areas  6.2  28.5  NaN   \n",
       "3  Residential, Rural and other Areas  6.3  14.7  NaN   \n",
       "4                     Industrial Area  4.7   7.5  NaN   \n",
       "\n",
       "  location_monitoring_station      date  Year  \n",
       "0                         NaN  2/1/1990  1990  \n",
       "1                         NaN  2/1/1990  1990  \n",
       "2                         NaN  2/1/1990  1990  \n",
       "3                         NaN  3/1/1990  1990  \n",
       "4                         NaN  3/1/1990  1990  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in data2['date']:\n",
    "    x = type(i)\n",
    "    x = str(x)\n",
    "    if(i == \"NaN\"):\n",
    "        data2['date'].replace( \"NaN\",'0/0/0',inplace=True )\n",
    "\n",
    "l1 = []\n",
    "for j in data2['date']:\n",
    "    s = j.split('/')[2]\n",
    "    l1.append(s)\n",
    "\n",
    "data2['Year'] = l1\n",
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stn_code</th>\n",
       "      <th>sampling_date</th>\n",
       "      <th>state</th>\n",
       "      <th>location</th>\n",
       "      <th>type</th>\n",
       "      <th>so2</th>\n",
       "      <th>no2</th>\n",
       "      <th>rspm</th>\n",
       "      <th>location_monitoring_station</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>4.8</td>\n",
       "      <td>17.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>151</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>3.1</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>152</td>\n",
       "      <td>February - M021990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.2</td>\n",
       "      <td>28.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>150</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Residential, Rural and other Areas</td>\n",
       "      <td>6.3</td>\n",
       "      <td>14.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>151</td>\n",
       "      <td>March - M031990</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>Industrial Area</td>\n",
       "      <td>4.7</td>\n",
       "      <td>7.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  stn_code       sampling_date           state   location  \\\n",
       "0      150  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "1      151  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "2      152  February - M021990  Andhra Pradesh  Hyderabad   \n",
       "3      150     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "4      151     March - M031990  Andhra Pradesh  Hyderabad   \n",
       "\n",
       "                                 type  so2   no2 rspm  \\\n",
       "0  Residential, Rural and other Areas  4.8  17.4  NaN   \n",
       "1                     Industrial Area  3.1     7  NaN   \n",
       "2  Residential, Rural and other Areas  6.2  28.5  NaN   \n",
       "3  Residential, Rural and other Areas  6.3  14.7  NaN   \n",
       "4                     Industrial Area  4.7   7.5  NaN   \n",
       "\n",
       "  location_monitoring_station  Year  \n",
       "0                         NaN  1990  \n",
       "1                         NaN  1990  \n",
       "2                         NaN  1990  \n",
       "3                         NaN  1990  \n",
       "4                         NaN  1990  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.drop(columns='date', inplace=True)\n",
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
